- мотивация
- как из старого конфига получить новый
- какие поля изменились
- танкапи
- танкапи-cmd
- веб-интерфейс танкапи
- firestarter



Танк 1.9.0 валидирует конфиги перед запуском и проставляет дефолтные значения. Это позволит сэкономить время на поисках ошибок в конфигах.

[Пример]

Вы можете проверить, проходит ли валидацию ваш конфиг, воспользовавшись сервисом https://tank-validator.common-int.yandex-team.ru/ui/#!/default/api_validate_config
Сервис поддерживает прежний (ini) и новый (yaml) форматы конфигов.
Сервис помержит ваш конфиг с базовым танковым конфигом, провалидирует и вернет получившийся конфиг в yaml-формате (так что его можно использовать также для конвертации старого формата в новый) и список ошибок.
Да, для старого формата мы написали конвертер, так что какое-то время он еще будет поддерживаться (но это не точно).

Внимание: некоторые старые конфиги, с которыми раньше танк запускался нормально, могут теперь не пройти валидацию, если они содержат устаревшие опции или опечатки.

Валидатор основан на библиотеке Cerberus (http://docs.python-cerberus.org)
Правила валидации включают проверку типов, регулярные выражения, граничные значения, обязательные поля.
Для описания правил используются схемы - такая схема обязана быть у каждого плагина.

[Пример]


Как выглядит новый конфиг:

core:
  lock_dir: .
phantom:
  enabled: true
  package: yandextank.plugins.Phantom
  address: 203.0.113.1:80
  load_profile:
    load_type: rps
    schedule: line(1, 10, 10m)
telegraf:
  enabled: true
  package: yandextank.plugins.Telegraf
  telegraf: telegraf_config.xml
uploader:
  enabled: true
  package: yandextank.plugins.DataUploader
  api_address: https://lunapark.yandex-team.ru

В секции core задаются несколько общих основных параметров, такие как директория для .lock-файлов или привязка процесса танка к конкретному ядру (полный список см. в схеме https://github.com/yandex/yandex-tank/blob/release-1.9.0/yandextank/core/config/schema.yaml). Ни один из этих параметров не является обязательным.
Кроме core на верхнем уровне располагаются секции плагинов - они могут иметь любые имена, но мы используем традиционные. У любого плагина есть как минимум два обязательных поля:
    package - python-package с классом Plugin
    enabled - флаг для включения/отключения плагина
Тем не менее, для большинства плагинов эти поля уже заполнены в нашем базовом конфиге (https://github.com/yandex/yandex-tank/blob/release-1.9.0/yandextank/core/config/00-base.yaml), так что вам не обязательно их указывать (если, конечно, вы не хотите отключить плагин, написав enabled: false).
Остальные поля определяются схемой конкретного плагина, которая должна быть расположена в директории плагина, в config/schema.yaml.

Вы могли обратить внимание, что в новом конфиге у плагина Phantom нет поля rps_schedule/instances_schedule/stpd_file. Мы заменили его общим полем load_profile, которое содержит информацию о типе нагрузки (rps|instances|stpd_file) и расписании (в случае с stpd-файлом здесь указывается его расположение) То же самое относится к BFG. Также в новом конфиге изменились форматы следующих параметров:
- плагин Autostop, поле autostop: теперь это список критериев:
    autostop:
      enabled: true
      autostop:
        - total_time(70ms, 3%, 10s)
        - http(4xx,25%,10)
- плагин JMeter, поле exclude_markers: теперь список
- плагин Pandora, поле config_content: теперь это yaml/json object
